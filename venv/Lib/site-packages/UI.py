from tkinter import *
from enum import Flag
from abc import ABC, abstractmethod


class UIElement(ABC):
    def __init__(self, name=None):
        self.name = name
        self.type = ElementType.NONE

    def GetType(self):
        return self.type

    @abstractmethod
    def _Place(self):
        pass

    @abstractmethod
    def __str__(self):
        pass


class UILabel(UIElement):
    def __init__(self, text, name=None, **kwargs):
        UIElement.__init__(self, name=name)
        M_Text.__init__(self, text)
        self.type = ElementType.HAS_TEXT
        self.kwargs = kwargs

    def SetText(self, text):
        self.text.set(text)

    def _Place(self, frame, push=TOP, **kwargs):
        self.kwargs.update(kwargs)
        self.kwargs.pop("textvariable", None)
        self.label = Label(frame, textvariable=self.text, **self.kwargs)
        self.label.pack(side=push)

    def __str__(self):
        return "Label: " + self.text.get()


class UIButton(UIElement):
    def __init__(self, action, data=None, text="", name=None, **kwargs):
        UIElement.__init__(self, name=name)
        M_Text.__init__(self, text)
        self.type = ElementType.HAS_ACTION | ElementType.HAS_TEXT
        self.action = action
        self.data = data
        self.kwargs = kwargs

    def SetText(self, text):
        self.text.set(text)

    def _Place(self, frame, push=TOP, **kwargs):
        self.kwargs.update(kwargs)
        self.kwargs.pop("textvariable",None)
        self.kwargs.pop("command",None)
        self.button = Button(frame, textvariable=self.text, command=self._Command(), **self.kwargs)
        self.button.pack(side=push)

    def _Command(self):
        self.action(self.data)

    def __str__(self):
        return "Button: " + self.text.get()

    def CopySlef(self, action=None, data=None, text=None, name=None, addToSameFrame=False, **override_args):
        newAction = self.action if action == None else action
        newData = self.data if data == None else data
        newText = self.text.get() if text == None else text
        newName = self.name if name == None else name
        myCopy = UIButton(newAction, data=newData, text=newText, name=newName, **self.kwargs)
        myCopy.kwargs.update(override_args)
        if addToSameFrame:
            self.owner.Add(myCopy, self.side)
        return myCopy


class M_Text:
    def SetText(self, text):
        self.text.set(text)

    def __init__(self, text):
        self.text = StringVar()
        self.SetText(text)


class UIFrame(UIElement):
    def __init__(self, root=None, name=None, **kwargs):
        UIElement.__init__(self, name=name)
        self.type = ElementType.IS_CONTAINER
        self.lst = []
        self.root = root
        self.kwargs = kwargs
        if root != None:
            self._Place(root)

    def _Place(self, frame, push=TOP, **kwargs):
        self.kwargs.update(kwargs)
        self.frame = Frame(frame, **kwargs)
        self.frame.pack(side=push)

    def Add(self, item, side=LEFT, **kwargs):
        item._Place(self.frame, push=side, **kwargs)
        self.lst.append(item)
        item.owner = self
        item.side = side

    def __iadd__(self, uiElement):
        if issubclass(type(uiElement), UIElement):
            self.Add(uiElement)
            return self
        return NotImplemented

    def __str__(self, tab=0):
        r = "Frame\n"
        tab += 1
        for i in self.lst:
            for j in range(tab):
                r += "\t"
            if isinstance(i, UIFrame):
                r += i.__str__(tab=tab)
            else:
                r += str(i) + "\n"
        return r

    def FindFrameElementsByName(self, name):
        return [item for item in self.lst if item.name == name]

    def FindElementsByName(self, name):
        lst = []
        for item in self.lst:
            if item.name == name:
                lst.append(item)
            if isinstance(item, UIFrame):
                elm = item.FindElementsByName(name)
                lst.extend(elm)
        return lst

    def FineEachFrameElementByName(self, name):
        for item in self.lst:
            if item.name == name:
                yield item
            if isinstance(item, UIFrame):
                yield from item.FineFrameElementByName(name)


class ElementType(Flag):
    NONE = 0
    HAS_TEXT = 1
    HAS_ACTION = 2
    IS_CONTAINER = 4
